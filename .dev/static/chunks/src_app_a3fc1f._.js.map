{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components_/login/index.tsx"],"sourcesContent":["\"use client\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { signIn, getCsrfToken, getProviders } from \"next-auth/react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useRouter } from \"next/navigation\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport React from \"react\";\nimport { useSession } from \"../../../app/sessions\";\nimport { toast } from \"sonner\";\nimport { AppContext, type AppStoreProps } from \"~/store\";\nimport { useStore } from \"zustand\";\n\nexport default function SignIn({ csrfToken, params }: any) {\n  const session = useSession();\n  const router = useRouter();\n  const [error, setError] = useState(null);\n  const [redirectUrl, setRedirectUrl] = useState(\"/\");\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const store = useContext(AppContext);\n  if (!store) throw new Error(\"Missing AppContext.Provider in the tree\");\n  const appStore = useStore(store, (s: AppStoreProps) => s.APP);\n\n  function togglePasswordVisibility(e) {\n    setIsPasswordVisible((prevState) => !prevState);\n    e.preventDefault();\n  }\n\n  useEffect(() => {\n    const url = new URL(location.href);\n    setRedirectUrl(url.searchParams.get(\"callbackUrl\")!);\n    if (session?.data?.user.role && session?.data?.user.role !== \"guest\") {\n      console.log(\"Logged in as\", session.data.user);\n      toast.success(\"Vous êtes connecté.\", {\n        duration: 1000,\n      });\n      void router.push(redirectUrl ? redirectUrl : \"/\");\n    }\n  }, [session]);\n\n  return (\n    <>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .max(60, \"Doit contenir 60 caractères maximum\")\n            .email(\"Email invalide\")\n            .required(\"Veuillez saisir votre identifiant de connexion\"),\n          password: Yup.string().required(\"Veuillez saisir votre mot de passe\"),\n        })}\n        onSubmit={async (values, { setSubmitting }) => {\n          const res: any = await signIn(\"credentials\", {\n            redirect: false,\n            email: values.email,\n            password: values.password,\n            // callbackUrl: `${redirectUrl ? redirectUrl : null}`,\n          });\n\n          if (res?.error) {\n            setError(res.error);\n          } else {\n            setError(null);\n          }\n          if (res.url) {\n            if (res.url.includes(\"/api/auth/signin\")) {\n              res.url = redirectUrl ? redirectUrl : appStore.URL;\n            }\n            session.refetch();\n            void router.push(redirectUrl ? redirectUrl : appStore.URL);\n          }\n          setSubmitting(false);\n        }}\n      >\n        {(formik) => (\n          <form onSubmit={formik.handleSubmit}>\n            <div\n              className={`flex min-h-screen flex-col items-center px-6 pt-24 ${appStore.THEME.LOGIN_BG ? appStore.THEME.LOGIN_BG : \"bg-primary\"}`}\n            >\n              {/* <h1 className=\"font-extrabold tracking-tight text-white sm:text-[3rem] mb-4\">\n                    Pro <span className=\"text-[#5ba314]\">Bio</span> Terre\n                </h1> */}\n              <Link href=\"/\">\n                Logo ici\n                {/* {appStore.LOGO ? (\n                  <Image\n                    className=\"mb-8\"\n                    src={appStore.LOGO}\n                    alt=\"logo\"\n                    width={300}\n                    height={100}\n                  />\n                ) : null} */}\n              </Link>\n\n              <div className=\"mb-4 rounded bg-white px-8 pb-8 pt-6 shadow-md\">\n                <input\n                  name=\"csrfToken\"\n                  type=\"hidden\"\n                  defaultValue={csrfToken}\n                />\n\n                <div className=\"flex items-center justify-center rounded\">\n                  <div className=\"text-md mb-3 max-w-sm text-red-400\">{error}</div>\n                </div>\n                <div className=\"mb-4\">\n                  <label\n                    htmlFor=\"email\"\n                    className=\"text-sm font-bold uppercase text-gray-600\"\n                  >\n                    Identifiant de connexion (email)\n                    <Field\n                      name=\"email\"\n                      aria-label=\"enter your email\"\n                      aria-required=\"true\"\n                      type=\"text\"\n                      className=\"mt-2 w-full rounded-sm bg-slate-100 p-3 text-gray-900\"\n                    />\n                  </label>\n\n                  <div className=\"text-sm text-red-600\">\n                    <ErrorMessage name=\"email\" />\n                  </div>\n                </div>\n                <div className=\"mb-6\">\n                  <label\n                    htmlFor=\"password\"\n                    className=\"text-sm font-bold uppercase text-gray-600\"\n                  >\n                    Mot de passe\n                    <div className=\"relative\">\n                      <Field\n                        name=\"password\"\n                        aria-label=\"enter your password\"\n                        aria-required=\"true\"\n                        // type=\"password\"\n                        type={isPasswordVisible ? \"text\" : \"password\"}\n                        className=\"mt-2 w-full rounded-sm bg-slate-100 p-3 text-gray-900\"\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute inset-y-0 right-0 -mb-1 flex items-center px-4 text-gray-600\"\n                        onClick={togglePasswordVisibility}\n                      >\n                        {isPasswordVisible ? (\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            strokeWidth={1.5}\n                            stroke=\"currentColor\"\n                            className=\"h-5 w-5\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              d=\"M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88\"\n                            />\n                          </svg>\n                        ) : (\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            strokeWidth={1.5}\n                            stroke=\"currentColor\"\n                            className=\"h-5 w-5\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              d=\"M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z\"\n                            />\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n                            />\n                          </svg>\n                        )}\n                      </button>\n                    </div>\n                  </label>\n\n                  <div className=\"text-sm text-red-600\">\n                    <ErrorMessage name=\"password\" />\n                  </div>\n                </div>\n\n                {session.isLoading ? (\n                  <div className=\"flex items-center justify-center\">\n\n                    <button\n                      type=\"submit\"\n                      className=\"w-full rounded-lg bg-primary p-3 text-gray-100\"\n                    >\n                      Veuillez patienter...\n                    </button>\n\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"flex items-center justify-center\">\n                      <button\n                        type=\"submit\"\n                        // className=\"w-full rounded-lg bg-primary p-3 text-gray-100\"\n                        className=\"w-full rounded-lg bg-primary p-3 text-center text-sm font-medium text-white hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2 dark:bg-primary dark:hover:bg-primary/80 dark:focus:ring-primary/80\"\n                      >\n                        {formik.isSubmitting ? \"Veuillez patienter...\" : \"Se connecter\"}\n                      </button>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\n// This is the recommended way for Next.js 9.3 or newer\nexport async function getServerSideProps(context: any) {\n  const providers = await getProviders();\n  const csrfToken = await getCsrfToken(context);\n  return {\n    props: {\n      providers,\n      csrfToken,\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}