{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/inter_edb9147b.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"inter_edb9147b-module__xWQRDW__className\",\n  \"variable\": \"inter_edb9147b-module__xWQRDW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA"}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/inter_edb9147b.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-sans%22}],%22variableName%22:%22inter%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inter', 'Inter Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/trpc/react.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TRPCReactProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TRPCReactProvider() from the server but TRPCReactProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"TRPCReactProvider\",\n);\nexport const api = registerClientReference(\n    function() { throw new Error(\"Attempted to call api() from the server but api is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"api\",\n);\n"],"names":[],"mappings":";;;;;;;AACO,MAAM,oBAAoB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,gCACA;AAEG,MAAM,MAAM,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,gCACA"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/sessions.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AppSessionProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call AppSessionProvider() from the server but AppSessionProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/sessions.tsx\",\n    \"AppSessionProvider\",\n);\nexport const useSession = registerClientReference(\n    function() { throw new Error(\"Attempted to call useSession() from the server but useSession is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/sessions.tsx\",\n    \"useSession\",\n);\n"],"names":[],"mappings":";;;;;;;AACO,MAAM,qBAAqB,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,kCACA;AAEG,MAAM,aAAa,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,kCACA"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/layoutClient.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/layoutClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/layoutClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwQ,GACrS,sCACA"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/layout.tsx"],"sourcesContent":["import \"~/styles/globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { Toaster } from \"sonner\";\nimport { TRPCReactProvider } from \"~/trpc/react\";\nimport { AppSessionProvider } from \"./sessions\";\nimport LayoutClient from \"./layoutClient\";\nimport { headers } from \"next/headers\";\n\nconst inter = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nexport const metadata = {\n  title: \"\",\n  description: \"\",\n  icons: [{ rel: \"icon\", url: \"/favicon.ico\" }],\n};\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const headersList = headers();\n  const app = headersList.get(\"x-app\");\n  return (\n    <html lang=\"fr\">\n      <body className={`font-sans ${inter.variable}`}>\n        <LayoutClient\n          app={app}\n        >\n          {/* <TRPCReactProvider cookies={cookies().toString()}> */}\n          <TRPCReactProvider>\n            <AppSessionProvider>{children}</AppSessionProvider>\n          </TRPCReactProvider>\n          <Toaster richColors />\n        </LayoutClient>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAaO,MAAM,WAAW;IACtB,OAAO;IACP,aAAa;IACb,OAAO;QAAC;YAAE,KAAK;YAAQ,KAAK;QAAe;KAAE;AAC/C;AAEe,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,cAAc,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC1B,MAAM,MAAM,YAAY,GAAG,CAAC;IAC5B,qBACE,wPAAC;QAAK,MAAK;kBACT,cAAA,wPAAC;YAAK,WAAW,CAAC,UAAU,EAAE,yIAAA,CAAA,UAAK,CAAC,QAAQ,CAAC,CAAC;sBAC5C,cAAA,wPAAC,2HAAA,CAAA,UAAY;gBACX,KAAK;;kCAGL,wPAAC,qHAAA,CAAA,oBAAiB;kCAChB,cAAA,wPAAC,uHAAA,CAAA,qBAAkB;sCAAE;;;;;;;;;;;kCAEvB,wPAAC,wIAAA,CAAA,UAAO;wBAAC,UAAU;;;;;;;;;;;;;;;;;;;;;;AAK7B"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/error.jsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/error.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/error.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/not-found.tsx"],"sourcesContent":["import React from \"react\";\n\nconst Page = async () => {\n  return (\n    <>\n      <div className=\"bg-white\">\n        <main className=\"mx-auto w-full max-w-7xl px-6 pb-16 pt-10 sm:pb-24 lg:px-8\">\n          <div className=\"mx-auto mt-20 max-w-2xl text-center sm:mt-24\">\n\n            <p className=\"text-base font-semibold leading-8 text-primary\">Erreur 404</p>\n\n            <h1 className=\"mt-4 text-3xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n              Cette page n'existe pas\n            </h1>\n\n            <p className=\"mt-4 text-base leading-7 text-gray-600 sm:mt-6 sm:text-lg sm:leading-8\">\n              Désolé, nous n'avons pas pu trouver la page que vous recherchez.\n            </p>\n          </div>\n\n        </main>\n      </div>\n    </>\n  );\n};\n\nexport default Page;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,OAAO;IACX,qBACE;kBACE,cAAA,wPAAC;YAAI,WAAU;sBACb,cAAA,wPAAC;gBAAK,WAAU;0BACd,cAAA,wPAAC;oBAAI,WAAU;;sCAEb,wPAAC;4BAAE,WAAU;sCAAiD;;;;;;sCAE9D,wPAAC;4BAAG,WAAU;sCAAmE;;;;;;sCAIjF,wPAAC;4BAAE,WAAU;sCAAyE;;;;;;;;;;;;;;;;;;;;;;;AASlG;uCAEe"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/drizzle/schema.ts"],"sourcesContent":["import { pgTable, unique, pgEnum, bigint, timestamp, text } from \"drizzle-orm/pg-core\"\n  import { sql } from \"drizzle-orm\"\n\nexport const aal_level = pgEnum(\"aal_level\", ['aal1', 'aal2', 'aal3'])\nexport const code_challenge_method = pgEnum(\"code_challenge_method\", ['s256', 'plain'])\nexport const factor_status = pgEnum(\"factor_status\", ['unverified', 'verified'])\nexport const factor_type = pgEnum(\"factor_type\", ['totp', 'webauthn'])\nexport const one_time_token_type = pgEnum(\"one_time_token_type\", ['confirmation_token', 'reauthentication_token', 'recovery_token', 'email_change_token_new', 'email_change_token_current', 'phone_change_token'])\nexport const key_status = pgEnum(\"key_status\", ['default', 'valid', 'invalid', 'expired'])\nexport const key_type = pgEnum(\"key_type\", ['aead-ietf', 'aead-det', 'hmacsha512', 'hmacsha256', 'auth', 'shorthash', 'generichash', 'kdf', 'secretbox', 'secretstream', 'stream_xchacha20'])\nexport const action = pgEnum(\"action\", ['INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'ERROR'])\nexport const equality_op = pgEnum(\"equality_op\", ['eq', 'neq', 'lt', 'lte', 'gt', 'gte', 'in'])\n\n\nexport const posts = pgTable(\"posts\", {\n\t// You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n\tid: bigint(\"id\", { mode: \"number\" }).primaryKey().notNull(),\n\tcreated_at: timestamp(\"created_at\", { withTimezone: true, mode: 'string' }).defaultNow().notNull(),\n\ttitle: text(\"title\"),\n\ttext: text(\"text\"),\n},\n(table) => {\n\treturn {\n\t\tposts_id_key: unique(\"posts_id_key\").on(table.id),\n\t}\n});"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGO,MAAM,YAAY,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,aAAa;IAAC;IAAQ;IAAQ;CAAO;AAC9D,MAAM,wBAAwB,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,yBAAyB;IAAC;IAAQ;CAAQ;AAC/E,MAAM,gBAAgB,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,iBAAiB;IAAC;IAAc;CAAW;AACxE,MAAM,cAAc,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAAC;IAAQ;CAAW;AAC9D,MAAM,sBAAsB,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,uBAAuB;IAAC;IAAsB;IAA0B;IAAkB;IAA0B;IAA8B;CAAqB;AAC1M,MAAM,aAAa,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,cAAc;IAAC;IAAW;IAAS;IAAW;CAAU;AAClF,MAAM,WAAW,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,YAAY;IAAC;IAAa;IAAY;IAAc;IAAc;IAAQ;IAAa;IAAe;IAAO;IAAa;IAAgB;CAAmB;AACrL,MAAM,SAAS,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,UAAU;IAAC;IAAU;IAAU;IAAU;IAAY;CAAQ;AACnF,MAAM,cAAc,CAAA,GAAA,+JAAA,CAAA,SAAM,AAAD,EAAE,eAAe;IAAC;IAAM;IAAO;IAAM;IAAO;IAAM;IAAO;CAAK;AAGvF,MAAM,QAAQ,CAAA,GAAA,qJAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACrC,gFAAgF;IAChF,IAAI,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,MAAM;QAAE,MAAM;IAAS,GAAG,UAAU,GAAG,OAAO;IACzD,YAAY,CAAA,GAAA,oKAAA,CAAA,YAAS,AAAD,EAAE,cAAc;QAAE,cAAc;QAAM,MAAM;IAAS,GAAG,UAAU,GAAG,OAAO;IAChG,OAAO,CAAA,GAAA,+JAAA,CAAA,OAAI,AAAD,EAAE;IACZ,MAAM,CAAA,GAAA,+JAAA,CAAA,OAAI,AAAD,EAAE;AACZ,GACA,CAAC;IACA,OAAO;QACN,cAAc,CAAA,GAAA,oKAAA,CAAA,SAAM,AAAD,EAAE,gBAAgB,EAAE,CAAC,MAAM,EAAE;IACjD;AACD"}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/db/index.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\nimport * as schemas from './../../drizzle/schema'\n\nconst connectionString = process.env.DATABASE_URL\n\nconst client = postgres({\n  db: connectionString\n})\nexport const db = drizzle(client, {\n  schema: schemas\n});\n"],"names":[],"mappings":";;;;;;;;;;AAIA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,MAAM,SAAS,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE;IACtB,IAAI;AACN;AACO,MAAM,KAAK,CAAA,GAAA,0JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAChC,QAAQ;AACV"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/auth.ts"],"sourcesContent":["import { getServerSession, type NextAuthOptions, type DefaultSession } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport bcrypt from \"bcryptjs\";\nimport { type GetServerSidePropsContext } from \"next\";\nimport { db } from \"~/db\";\n// const bcrypt = require(\"bcrypt\");\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      role: string;\n    } & DefaultSession[\"user\"];\n  }\n\n  interface User {\n    // ...other properties\n    // role: UserRole;\n    role: string;\n  }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authOptions: NextAuthOptions = {\n  // callbacks: {\n  //   session({ session, user }) {\n  //     if (session.user) {\n  //       console.log('Have session', session, 'and user', user, 'so setting session.user.id')\n  //       session.user.id = user.id;\n  //       // session.user.role = user.role; <-- put other properties on the session here\n  //     }\n  //     return session;\n  //   },\n  // },\n  pages: {\n    signIn: \"/login\",\n    newUser: \"/inscription\",\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n        session.user.name = token.name;\n        session.user.role = token.role as string;\n      }\n      return session;\n    },\n    // callbacks: {\n    //   session: ({ session, user }) => ({\n    //     ...session,\n    //     user: {\n    //       ...session.user,\n    //       id: user.id,\n    //     },\n    //   }),\n    // },\n    jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.name = user.name;\n        token.role = (user as any).roles\n          .map((role: any) => {\n            //@ts-ignore\n            return role.name;\n          })\n          .join(\";\");\n        token.role = token.role || \"user\";\n      }\n      return token;\n    },\n  },\n  adapter: DrizzleAdapter(db),\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Username\", type: \"text\", placeholder: \"\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        console.log(\"Login\", { credentials });\n        const user = {\n          id: \"1\",\n          name: \"J Smith\",\n          email: \"\",\n          password: \"$2a$10$3Q7Z6z1\",\n          roles: [{ name: \"user\" }],\n        }\n        // const user = await db.query.user.findUnique({});\n\n        // const user = { id: \"1\", name: \"J Smith\", email: \"jsmith@example.com\", roles: [\"user\"] }\n        // return user;\n        if (!user) {\n          throw new Error(\"No user found\");\n        }\n\n        // if (process.env.npm_execpath?.includes('bun')) {\n        //   const passwordMatch = await Bun.password.verify(\n        //     credentials?.password as string,\n        //     user.password as string\n        //   );\n        //   if (!passwordMatch) {\n        //     throw new Error(\"Invalid password\");\n        //   }\n        // } else {\n        const passwordMatch = await bcrypt.compare(\n          credentials?.password as string,\n          user.password as string,\n        );\n        console.log(\"passwordMatch\", passwordMatch);\n        console.log(\"Supplied\", {\n          password: credentials?.password as string,\n          hash: user.password as string,\n        });\n        // const passwordMatch = true\n        if (!passwordMatch) {\n          throw new Error(\"Invalid password\");\n        }\n        // }\n        return {\n          ...user,\n          role: user.roles.map((role) => role.name).join(\";\"),\n        };\n      },\n    }),\n    /**\n     * ...add more providers here\n     *\n     * Most other providers require a bit more work than the Discord provider.\n     * For example, the GitHub provider requires you to add the\n     * `refresh_token_expires_in` field to the Account model. Refer to the\n     * NextAuth.js docs for the provider you want to use. Example:\n     * @see https://next-auth.js.org/providers/github\n     **/\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  jwt: {\n    secret: process.env.NEXTAUTH_SECRET,\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n};\n\n/**\n * Wrapper for `getServerSession` so that you don't need to import the `authOptions` in every file.\n *\n * @see https://next-auth.js.org/configuration/nextjs\n */\n// export const getServerAuthSession = (ctx: {\n//   req: GetServerSidePropsContext[\"req\"];\n//   res: GetServerSidePropsContext[\"res\"];\n// }) => {\n//   console.log(\"getServerAuthSession\", ctx.req, ctx.res);\n//   return getServerSession(ctx.req, ctx.res, authOptions);\n// };\n\nexport const getServerAuthSession = () => getServerSession(authOptions);\n// export const getServerAuthSession = (ctx: {\n//   req: GetServerSidePropsContext[\"req\"];\n//   res: GetServerSidePropsContext[\"res\"];\n// }) => {\n//   return getServerSession(ctx.req, ctx.res, authOptions);\n// };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAkCO,MAAM,cAA+B;IAC1C,eAAe;IACf,iCAAiC;IACjC,0BAA0B;IAC1B,6FAA6F;IAC7F,mCAAmC;IACnC,uFAAuF;IACvF,QAAQ;IACR,sBAAsB;IACtB,OAAO;IACP,KAAK;IACL,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW;QACT,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;QACA,eAAe;QACf,uCAAuC;QACvC,kBAAkB;QAClB,cAAc;QACd,yBAAyB;QACzB,qBAAqB;QACrB,SAAS;QACT,QAAQ;QACR,KAAK;QACL,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACjB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,IAAI,GAAG,AAAC,KAAa,KAAK,CAC7B,GAAG,CAAC,CAAC;oBACJ,YAAY;oBACZ,OAAO,KAAK,IAAI;gBAClB,GACC,IAAI,CAAC;gBACR,MAAM,IAAI,GAAG,MAAM,IAAI,IAAI;YAC7B;YACA,OAAO;QACT;IACF;IACA,SAAS,CAAA,GAAA,qJAAA,CAAA,iBAAc,AAAD,EAAE,kHAAA,CAAA,KAAE;IAC1B,WAAW;QACT,CAAA,GAAA,wJAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAY,MAAM;oBAAQ,aAAa;gBAAG;gBAC1D,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,SAAS;oBAAE;gBAAY;gBACnC,MAAM,OAAO;oBACX,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,UAAU;oBACV,OAAO;wBAAC;4BAAE,MAAM;wBAAO;qBAAE;gBAC3B;gBACA,mDAAmD;gBAEnD,0FAA0F;gBAC1F,eAAe;gBACf;;;gBAIA,mDAAmD;gBACnD,qDAAqD;gBACrD,uCAAuC;gBACvC,8BAA8B;gBAC9B,OAAO;gBACP,0BAA0B;gBAC1B,2CAA2C;gBAC3C,MAAM;gBACN,WAAW;gBACX,MAAM,gBAAgB,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CACxC,aAAa,UACb,KAAK,QAAQ;gBAEf,QAAQ,GAAG,CAAC,iBAAiB;gBAC7B,QAAQ,GAAG,CAAC,YAAY;oBACtB,UAAU,aAAa;oBACvB,MAAM,KAAK,QAAQ;gBACrB;gBACA,6BAA6B;gBAC7B,IAAI,CAAC,eAAe;oBAClB,MAAM,IAAI,MAAM;gBAClB;gBACA,IAAI;gBACJ,OAAO;oBACL,GAAG,IAAI;oBACP,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,OAAS,KAAK,IAAI,EAAE,IAAI,CAAC;gBACjD;YACF;QACF;KAUD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,KAAK;QACH,QAAQ,QAAQ,GAAG,CAAC,eAAe;QACnC,QAAQ,KAAK,KAAK,KAAK;IACzB;AACF;AAeO,MAAM,uBAAuB,IAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,cAC3D,8CAA8C;CAC9C,2CAA2C;CAC3C,2CAA2C;CAC3C,UAAU;CACV,4DAA4D;CAC5D,KAAK"}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/trpc-options.ts"],"sourcesContent":["import superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nconst trpcOptions = {\n    transformer: superjson,\n    errorFormatter({ shape, error }): any {\n        return {\n            ...shape,\n            data: {\n                ...shape.data,\n                zodError:\n                    error.cause instanceof ZodError ? error.cause.flatten() : null,\n            },\n        };\n    },\n}\n\nexport default trpcOptions;\n"],"names":[],"mappings":";;;;;;;;AAGA,MAAM,cAAc;IAChB,aAAa,iJAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC3B,OAAO;YACH,GAAG,KAAK;YACR,MAAM;gBACF,GAAG,MAAM,IAAI;gBACb,UACI,MAAM,KAAK,YAAY,oIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAClE;QACJ;IACJ;AACJ;uCAEe"}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\n\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport { type NextRequest } from \"next/server\";\nimport { getServerAuthSession } from \"~/server/auth\";\nimport trpcOptions from \"./trpc-options\";\nimport { type NextApiRequest } from \"next\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n */\n\ninterface CreateContextOptions {\n  headers: Headers;\n  req: NextRequest;\n}\n\n/**\n * This helper generates the \"internals\" for a tRPC context. If you need to use it, you can export\n * it from here.\n *\n * Examples of things you may need it for:\n * - testing, so we don't have to mock Next.js' req/res\n * - tRPC's `createSSGHelpers`, where we don't have req/res\n *\n * @see https://create.t3.gg/en/usage/trpc#-serverapitrpcts\n */\n// export const createInnerTRPCContext = async (opts: CreateContextOptions) => {\n//   const session = await getServerAuthSession();\n\n//   return {\n//     session,\n//     headers: opts.headers,\n//     db: getPrismaClientBasedOnHeaders(opts.headers),\n//     req: opts.req as unknown as NextApiRequest,\n//   };\n// };\n\n/**\n * This is the actual context you will use in your router. It will be used to process every request\n * that goes through your tRPC endpoint.\n *\n * @see https://trpc.io/docs/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers, app: string | null, host: string }) => {\n  const session = await getServerAuthSession();\n\n  return {\n    // db,\n    session,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\n\nconst t = initTRPC.context<typeof createTRPCContext>().create(trpcOptions);\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure;\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure.use(({ ctx, next }) => {\n  if (!ctx.session || !ctx.session.user) {\n    throw new TRPCError({ code: \"UNAUTHORIZED\" });\n  }\n  return next({\n    ctx: {\n      // infers the `session` as non-nullable\n      session: { ...ctx.session, user: ctx.session.user },\n    },\n  });\n});\n\n\nexport const internalProcedure = t.procedure.use(({ ctx, next }) => {\n  // check if we are calling from the server\n  // return next({ ctx, headers: \"ookokoko\" });\n  return next({ ctx });\n});"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;;;;;;;AAgDM,MAAM,oBAAoB,OAAO;IACtC,MAAM,UAAU,MAAM,CAAA,GAAA,qHAAA,CAAA,uBAAoB,AAAD;IAEzC,OAAO;QACL,MAAM;QACN;QACA,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GAED,MAAM,IAAI,gMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC,uIAAA,CAAA,UAAW;AAclE,MAAM,mBAAmB,EAAE,MAAM;AASjC,MAAM,kBAAkB,EAAE,SAAS;AAUnC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IAC9D,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE;QACrC,MAAM,IAAI,0MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF;AAGO,MAAM,oBAAoB,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IAC7D,0CAA0C;IAC1C,6CAA6C;IAC7C,OAAO,KAAK;QAAE;IAAI;AACpB"}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 662, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/routers/example.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  protectedProcedure,\n} from \"~/server/api/trpc\";\n\nexport const exampleRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      const today = new Date();\n      const date = today.getFullYear() + \"/\" + (today.getMonth() + 1) + \"/\" + today.getDate();\n      const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      const dateTime = date + ' ' + time;\n      return {\n        greeting: `${input.text}, nous somme le ${dateTime}`,\n      };\n    }),\n\n  getAll: publicProcedure.query(({ ctx }) => {\n    return [\n      {\n        id: 1,\n        name: \"John Doe\",\n        title: \"CEO\",\n        createdAt: new Date(),\n      },\n      {\n        id: 2,\n        name: \"Jane Doe\",\n        title: \"CTO\",\n        createdAt: new Date(),\n      },\n    ]\n  }),\n\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can now see this secret message!\";\n  }),\n});\n"],"names":[],"mappings":";;;;;;;;AAQO,MAAM,gBAAgB,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC5C,OAAO,4HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,MAAM,QAAQ,IAAI;QAClB,MAAM,OAAO,MAAM,WAAW,KAAK,MAAM,CAAC,MAAM,QAAQ,KAAK,CAAC,IAAI,MAAM,MAAM,OAAO;QACrF,MAAM,OAAO,MAAM,QAAQ,KAAK,MAAM,MAAM,UAAU,KAAK,MAAM,MAAM,UAAU;QACjF,MAAM,WAAW,OAAO,MAAM;QAC9B,OAAO;YACL,UAAU,CAAC,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC;QACtD;IACF;IAEF,QAAQ,4HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACpC,OAAO;YACL;gBACE,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,WAAW,IAAI;YACjB;YACA;gBACE,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,WAAW,IAAI;YACjB;SACD;IACH;IAEA,kBAAkB,4HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF"}},
    {"offset": {"line": 702, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/routers/auth.ts"],"sourcesContent":["import { Session } from \"next-auth/core/types\";\nimport { getToken, encode, JWT } from \"next-auth/jwt\";\nimport { z } from \"zod\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  protectedProcedure,\n} from \"~/server/api/trpc\";\n\nexport const authRouter = createTRPCRouter({\n  getSession: publicProcedure.query(({ ctx }) => {\n    return ctx.session;\n  }),\n  getProfile: protectedProcedure\n    .input(z.undefined())\n    .query(async ({ input, ctx }) => {\n      return ctx.session as unknown as Session || undefined;\n    }),\n\n  getUserInfo: publicProcedure\n    .input(z.object({ email: z.string() }))\n    .query(({ input, ctx }) => {\n      return {\n        input: input.email,\n        ok: true,\n        user: ctx?.session?.user || null\n      };\n    }),\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can now see this secret message!\";\n  })\n});\n"],"names":[],"mappings":";;;;;;;;AASO,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,YAAY,4HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE;QACxC,OAAO,IAAI,OAAO;IACpB;IACA,YAAY,4HAAA,CAAA,qBAAkB,CAC3B,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,SAAS,IACjB,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;QAC1B,OAAO,IAAI,OAAO,IAA0B;IAC9C;IAEF,aAAa,4HAAA,CAAA,kBAAe,CACzB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IACnC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;QACpB,OAAO;YACL,OAAO,MAAM,KAAK;YAClB,IAAI;YACJ,MAAM,KAAK,SAAS,QAAQ;QAC9B;IACF;IACF,kBAAkB,4HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF"}},
    {"offset": {"line": 735, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 740, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/server/api/root.ts"],"sourcesContent":["import { createTRPCRouter } from \"~/server/api/trpc\";\nimport { exampleRouter } from \"~/server/api/routers/example\";\nimport { authRouter } from \"~/server/api/routers/auth\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  example: exampleRouter,\n  auth: authRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n"],"names":[],"mappings":";;;;;;;;;;AASO,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,SAAS,0IAAA,CAAA,gBAAa;IACtB,MAAM,uIAAA,CAAA,aAAU;AAClB"}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 759, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/trpc/shared.ts"],"sourcesContent":["import { type inferRouterInputs, type inferRouterOutputs } from \"@trpc/server\";\nimport superjson from \"superjson\";\n\nimport { type AppRouter } from \"~/server/api/root\";\n\nexport const transformer = superjson;\n\nfunction getBaseUrl() {\n  if (typeof window !== \"undefined\") return \"\";\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;\n  return `http://localhost:${process.env.PORT ?? 3000}`;\n}\n\nexport function getUrl() {\n  return getBaseUrl() + \"/api/trpc\";\n}\n\n/**\n * Inference helper for inputs.\n *\n * @example type HelloInput = RouterInputs['example']['hello']\n */\nexport type RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helper for outputs.\n *\n * @example type HelloOutput = RouterOutputs['example']['hello']\n */\nexport type RouterOutputs = inferRouterOutputs<AppRouter>;\n"],"names":[],"mappings":";;;;;;;AAKO,MAAM,cAAc,iJAAA,CAAA,UAAS;AAEpC,SAAS;IACP,IAAI,OAAO,WAAW,aAAa,OAAO;IAC1C,IAAI,QAAQ,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC;IACtE,OAAO,CAAC,iBAAiB,EAAE,QAAQ,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC;AACvD;AAEO,SAAS;IACd,OAAO,eAAe;AACxB"}},
    {"offset": {"line": 775, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\n\nimport { createTRPCProxyClient, loggerLink, TRPCClientError } from \"@trpc/client\";\nimport { callProcedure } from \"@trpc/server\";\nimport { observable } from \"@trpc/server/observable\";\nimport { type TRPCErrorResponse } from \"@trpc/server/rpc\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\nimport { headers } from 'next/headers'\n\nimport { appRouter, type AppRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\nimport { transformer } from \"./shared\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(() => {\n  return createTRPCContext({\n    headers: new Headers({\n      cookie: cookies().toString(),\n      \"x-trpc-source\": \"rsc\",\n    }),\n    // read custom header \"x-app\" from the request\n    // app: headers().get(\"x-app\"),\n    // host: headers().get(\"host\") || \"\"\n  });\n});\n\nexport const api = createTRPCProxyClient<AppRouter>({\n  transformer,\n  links: [\n    loggerLink({\n      enabled: (op) =>\n        process.env.NODE_ENV === \"development\" ||\n        (op.direction === \"down\" && op.result instanceof Error),\n    }),\n    /**\n     * Custom RSC link that lets us invoke procedures without using http requests. Since Server\n     * Components always run on the server, we can just call the procedure as a function.\n     */\n    () =>\n      ({ op }) =>\n        observable((observer) => {\n          createContext()\n            .then((ctx) => {\n              return callProcedure({\n                procedures: appRouter._def.procedures,\n                path: op.path,\n                rawInput: op.input,\n                ctx,\n                type: op.type,\n              });\n            })\n            .then((data) => {\n              observer.next({ result: { data } });\n              observer.complete();\n            })\n            .catch((cause: TRPCErrorResponse) => {\n              observer.error(TRPCClientError.from(cause));\n            });\n        }),\n  ],\n});"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,+MAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,OAAO,CAAA,GAAA,4HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,QAAQ;YACnB,QAAQ,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,IAAI,QAAQ;YAC1B,iBAAiB;QACnB;IAIF;AACF;AAEO,MAAM,MAAM,CAAA,GAAA,0NAAA,CAAA,wBAAqB,AAAD,EAAa;IAClD,aAAA,qHAAA,CAAA,cAAW;IACX,OAAO;QACL,CAAA,GAAA,gKAAA,CAAA,aAAU,AAAD,EAAE;YACT,SAAS,CAAC,KACR,oDAAyB,iBACxB,GAAG,SAAS,KAAK,UAAU,GAAG,MAAM,YAAY;QACrD;QACA;;;KAGC,GACD,IACE,CAAC,EAAE,EAAE,EAAE,GACL,CAAA,GAAA,qKAAA,CAAA,aAAU,AAAD,EAAE,CAAC;oBACV,gBACG,IAAI,CAAC,CAAC;wBACL,OAAO,CAAA,GAAA,8LAAA,CAAA,gBAAa,AAAD,EAAE;4BACnB,YAAY,4HAAA,CAAA,YAAS,CAAC,IAAI,CAAC,UAAU;4BACrC,MAAM,GAAG,IAAI;4BACb,UAAU,GAAG,KAAK;4BAClB;4BACA,MAAM,GAAG,IAAI;wBACf;oBACF,GACC,IAAI,CAAC,CAAC;wBACL,SAAS,IAAI,CAAC;4BAAE,QAAQ;gCAAE;4BAAK;wBAAE;wBACjC,SAAS,QAAQ;oBACnB,GACC,KAAK,CAAC,CAAC;wBACN,SAAS,KAAK,CAAC,4JAAA,CAAA,kBAAe,CAAC,IAAI,CAAC;oBACtC;gBACJ;KACL;AACH"}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/pageClient.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/pageClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/pageClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA"}},
    {"offset": {"line": 863, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 868, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/page.tsx"],"sourcesContent":["import { api } from \"~/trpc/server\";\nimport ClientPageComponent from \"./pageClient\";\n\nexport default function Home() {\n  const exampleData = api.example.getAll.query();\n  return <>\n    <div className=\"container mx-auto\">\n      <pre>\n        {JSON.stringify(exampleData, null, 2)}\n      </pre>\n      <h1 className=\"text-3xl font-bold text-center\">Welcome to Drizzle TRPC Starter</h1>\n      <p className=\"text-center\">This is a starter template for building a fullstack app with Next.js, Drizzle, and TRPC.</p>\n    </div>\n    <div className=\"container mx-auto\">\n      <ClientPageComponent />\n    </div>\n  </>;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAGe,SAAS;IACtB,MAAM,cAAc,qHAAA,CAAA,MAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK;IAC5C,qBAAO;;0BACL,wPAAC;gBAAI,WAAU;;kCACb,wPAAC;kCACE,KAAK,SAAS,CAAC,aAAa,MAAM;;;;;;kCAErC,wPAAC;wBAAG,WAAU;kCAAiC;;;;;;kCAC/C,wPAAC;wBAAE,WAAU;kCAAc;;;;;;;;;;;;0BAE7B,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC,yHAAA,CAAA,UAAmB;;;;;;;;;;;;AAG1B"}},
    {"offset": {"line": 938, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 949, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 950, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}